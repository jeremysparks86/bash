#!/bin/bash

##### Script to sync / backup my media downloads to a USB hard drive.
##### 2016 Jeremy Sparks.

clear

##### Global vars.

local=( '/home/jeremy' )
remote=( '/media/jeremy/SAMSUNG' )
logfile=( '/home/jeremy/bin/log/filesync.log' )
datevar=$( date +%r )
datelog=$( date +'%F %T')

##### Function which writes to log file the user, time and actions of the script.

log_it () {
    echo -e "[${USER}] :: [${datelog}] :: [${*}]\n\n" | grep -v "sending incremental file list" >> ${logfile}
}

##### Function to perform the dry run (to determine if there are files in need of transfer).

dry_run () {
  ( rsync -havp --dry-run --update ${local}/Documents/ ${remote}/Documents/
    rsync -havp --dry-run --update ${local}/bin/ ${remote}/bin/
    rsync -havp --dry-run --size-only ${local}/Pictures/ ${remote}/Pictures/
    rsync -havp --dry-run --size-only ${local}/Music/ ${remote}/Music/
    rsync -havp --dry-run --size-only ${local}/Videos/ ${remote}/Videos/
    rsync -havp --dry-run --size-only ${local}/Downloads/ ${remote}/Downloads/ )
}

##### Functions to complete the actual file transfers.

rsync_update () {
    local rfiles=$( rsync -havp --progress --update "$1" "$2" )
    log_it "$rfiles"
}

rsync_size () {
    local rfiles=$( rsync -havp --progress --size-only "$1" "$2" )
    log_it "$rfiles"
}

copy_all_from_pc () {
    local rfiles=$(
    rsync_update ${local}/Documents/ ${remote}/Documents/
    rsync_update ${local}/bin/ ${remote}/bin/
    rsync_size ${local}/Pictures/ ${remote}/Pictures/
    rsync_size ${local}/Music/ ${remote}/Music/
    rsync_size ${local}/Videos/ ${remote}/Videos/
    rsync_size ${local}/Downloads/ ${remote}/Downloads/ )
    log_it "$rfiles"
}

copy_all_to_pc () {
    local rfiles=$(
    rsync_update ${remote}/Documents/ ${local}/Documents/
    rsync_update ${remote}/bin/ ${local}/bin/
    rsync_size ${remote}/Pictures/ ${local}/Pictures/
    rsync_size ${remote}/Music/ ${local}/Music/
    rsync_size ${remote}/Videos/ ${local}/Videos/
    rsync_size ${remote}/Downloads/ ${local}/Downloads/ )
    log_it "$rfiles"
}

##### Creates folder / file for logs to be generated by the script.

    while [ ! -d /home/jeremy/bin/log ]; do

        mkdir /home/jeremy/bin/log
        touch /home/jeremy/bin/log/filesync.log

    done

echo -e "\nFilesync script started at "${datevar}" by user: "${USER}""

##### Performs a dry run of the rsync commands using the dry_run function and counts the lines of STDOUT.
##### If this output is more than eighteen then there must be files to transfer.

    dryruncount=$( dry_run | grep -v "sending incremental file list" | wc -l )

    if [ ${dryruncount} -le 18 ]; then

        printf "\nAll files are already synced and up to date.\n\n"

    else

##### Prompts user for input.

        printf "\n\nPlease select from the following file types to sync:\n"

        printf "\n--- documents\n--- scripts\n--- pictures\n--- music\n--- videos\n--- downloads\n--- all\n--- restore (HDD to PC)\n"

        printf "\nType documents, scripts, pictures, music, videos, downloads, all or restore:\n\n"

##### This script also takes input from command line using an "all" flag (useful for running on a Crontab job).
##### Runs rsync to sync everything from the USB HDD to the PC. Restore option copies back in the other direction.
##### Files will be updated if they are larger in file size but timestamps are ignored (with the exception of documents and scripts).

    if [ $# -lt 1 ]; then

    read input

        case ${input} in

            documents)
            printf "\nDocuments option selected.\n\n"
            rsync_update ${local}/Documents/ ${remote}/Documents/
            ;;
            scripts)
            printf "\nScripts option selected.\n\n"
            rsync_update ${local}/bin/ ${remote}/bin/
            ;;
            pictures)
            printf "\nPictures option selected.\n\n"
            rsync_size ${local}/Pictures/ ${remote}/Pictures/
            ;;
            music)
            printf "\nMusic option selected.\n\n"
            rsync_size ${local}/Music/ ${remote}/Music/
            ;;
            videos)
            printf "\nVideos option selected.\n\n"
            rsync_size ${local}/Videos/ ${remote}/Videos/
            ;;
            downloads)
            printf "\nDownloads option selected.\n\n"
            rsync_size ${local}/Downloads/ ${remote}/Downloads/
            ;;
            all)
            printf "\nSync all option selected.\n\n"
            copy_all_from_pc
            ;;
            restore)
            printf "\nRestore all from HDD selected.\n\n"
            copy_all_to_pc
            ;;
            *)
            printf "\nSorry, your input was not recognised.\n\n"
            ;;

        esac

    printf "Thank you. Your file sync has been completed.\n\n"

exit 0

    else

##### Code to run if the "restore" argument is passed from the command line.

        copy_all_to_pc

    printf "\nThank you. Your file sync has been completed.\n\n"

    fi

    fi

exit 0
